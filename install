#!/usr/bin/env bash

URL=https://raw.githubusercontent.com/limix/bgen/master/VERSION
VERSION=$(curl -s $URL)
ORIG_DIR=$(pwd)

echo "[0/5] Library(bgen==$VERSION)"

tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir')
logfile="$(mktemp 2>/dev/null --suffix=bgen.log ||\
           mktemp -t 'tmpdir' --suffix=bgen.log)"
exec 3> "$logfile"

FILE=bgen-$VERSION.tar.gz
DIR=bgen-$VERSION
URL=https://github.com/limix/bgen/archive/$VERSION.tar.gz

trap cleanup EXIT
function cleanup
{
    exec 3>&-
    rm -rf "$tmpdir" >/dev/null 2>&1 || true
    cd "$ORIG_DIR"
}

trap ctrl_c INT
function ctrl_c()
{
    echo "Log file path: $logfile"
}

function silent_run
{
    eval "$@" 2>&3 1>&3
}

function do_then_sudo
{
    eval "$@"
    if [ $? != 0 ]; then
        eval "sudo $@"
    fi
}

function failed
{
    echo "FAILED."
    echo "[_/5] Log output:"
    echo ""
    echo "$logfile"
    echo ""
    echo "Log file path: $logfile"
    exit 1
}

function succeeded
{
    cleanup
    rm -rf "$logfile" >/dev/null 2>&1 || true
}

cd $tmpdir

echo -n "[1/5] Downloading... "
silent_run curl -o $FILE -L $URL
[ $? == 0 ] && echo "done." || { failed; exit 1; }

tar xzf $FILE && cd $DIR
mkdir build && cd build

echo -n "[2/5] Configuring... "
silent_run cmake ..
[ $? == 0 ] && echo "done." || { failed; exit 1; }

echo -n "[3/5] Compiling... "
silent_run make
[ $? == 0 ] && echo "done." || { failed; exit 1; }

echo -n "[4/5] Testing... "
silent_run make test
[ $? == 0 ] && echo "done." || { failed; exit 1; }

echo -n "[5/5] Installing... "
silent_run do_then_sudo make install
[ $? == 0 ] && echo "done." || { failed; exit 1; }

if type "ldconfig" >/dev/null 2>&1; then
    silent_run do_then_sudo ldconfig
fi

succeeded

